name: Run kdevops on self-hosted runner

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:  # Add this for manual triggering of the workflow

jobs:
  run-kdevops:
    name: Run kdevops CI
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set CI metadata for kdevops-results-archive
        run: |
          echo "$(basename ${{ github.repository }})" > ci.trigger
          git log -1 --pretty=format:"%s" > ci.subject
          # Start out pessimistic
          echo "not ok" > ci.result
          echo "Nothing to write home about." > ci.commit_extra

      - name: Set kdevops path
        run: echo "KDEVOPS_PATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Configure git
        run: |
          git config --global --add safe.directory '*'
          git config --global user.name "kdevops"
          git config --global user.email "kdevops@lists.linux.dev"

      - name: Run kdevops make defconfig-repo
        run: |
          KDEVOPS_TREE_REF="${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}"
          SHORT_PREFIX="$(echo ${KDEVOPS_TREE_REF:0:12})"
          make KDEVOPS_HOSTS_PREFIX="$SHORT_PREFIX" defconfig-xfs_reflink_4k
          ANSIBLE_CFG_CALLBACK_PLUGIN="debug"

      - name: Run kdevops make
        run: |
          make -j$(nproc)

      - name: Run kdevops make bringup
        run: |
          make bringup

      - name: Build linux and boot test nodes on test kernel
        run: |
          make linux

      - name: Build fstests
        run: |
          make fstests

      - name: Run just one fstest to verify we tests and test collection works
        run: |
          make fstests-baseline TESTS=generic/003
          echo "ok" > ci.result
          find workflows/fstests/results/last-run -name xunit_results.txt -type f -exec cat {} \; > ci.commit_extra || true
          if ! grep -E "failures, [1-9]|errors, [1-9]" ci.commit_extra; then
            echo "ok" > ci.result
          fi

      - name: Get systemd journal files
        if: always() # This ensures the step runs even if previous steps failed
        run: |
          make journal-dump

      - name: Start SSH Agent
        if: always()  # Ensure this step runs even if previous steps failed
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Build our kdevops archive results
        if: always() # This ensures the step runs even if previous steps failed
        run: |
          make ci-archive

      - name: Upload our kdevops results archive
        if: always() # This ensures the step runs even if previous steps failed
        uses: actions/upload-artifact@v4
        with:
          name: kdevops-ci-results
          path: ${{ env.KDEVOPS_PATH }}/archive/*.zip

      # Ensure make destroy always runs, even on failure
      - name: Run kdevops make destroy
        if: always()  # This ensures the step runs even if previous steps failed
        run: |
          make destroy
