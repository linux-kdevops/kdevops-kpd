---
- name: Include optional extra_vars
  ansible.builtin.include_vars:
    file: "{{ item }}"
  with_first_found:
    - files:
        - "../extra_vars.yml"
        - "../extra_vars.yaml"
        - "../extra_vars.json"
      skip: true
  failed_when: false
  tags: vars

- name: Debian-specific set up
  ansible.builtin.import_tasks: install-deps/debian/main.yml
  when:
    - ansible_os_family == "Debian"

- name: Suse-specific set up
  ansible.builtin.import_tasks: install-deps/suse/main.yml
  when:
    - ansible_os_family == "Suse"

- name: Red Hat-specific set up
  ansible.builtin.import_tasks: install-deps/redhat/main.yml
  when:
    - ansible_os_family == "RedHat"

# We use "console serial" so to enable real consoles to be
# preferred first, and fallback to the serial as secondary
# option. This let's us work with hardware serial consoles
# say on IPMIs and virtual guests ('virsh console').
- name: Ensure we can get the GRUB prompt on reboot
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_TERMINAL='
    line: GRUB_TERMINAL="console serial"
  tags:
    - linux
    - git
    - config
    - console

- name: Update the boot GRUB file
  ansible.builtin.import_tasks: update-grub/main.yml
  tags:
    - linux
    - uninstall-linux
    - manual-update-grub
    - console

- name: Ensure DEFAULTDEBUG is set
  become: true
  become_flags: 'su - -c'
  become_method: ansible.builtin.sudo
  register: grub_default_saved_cmd
  ansible.builtin.lineinfile:
    path: /etc/sysconfig/kernel
    regexp: '^DEFAULTDEBUG='
    line: DEFAULTDEBUG=yes
  when:
    - ansible_os_family == "RedHat"
  tags:
    - linux
    - git
    - config
    - saved

- name: Install the built kernel RPMs on the target nodes
  when:
    - ansible_os_family == "RedHat"
  tags:
    - linux
    - install-linux
  block:
    - name: Find the kernel build artifacts on the control host
      delegate_to: localhost
      ansible.builtin.find:
        paths: "{{ build_artifacts_dir }}"
        patterns: "*.rpm"
        file_type: file
        recurse: true
      register: found_rpms

    - name: Upload the kernel build artifacts to the target nodes
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "/tmp"
        mode: "u=rw,g=r,o=r"
      loop: "{{ found_rpms.files }}"
      loop_control:
        label: "Uploading {{ item.path }}"

    - name: Initialize list of packages to install
      ansible.builtin.set_fact:
        packages: []

    - name: Build a list of packages to install
      ansible.builtin.set_fact:
        packages: "{{ packages + ['/tmp/' + item.path | basename ] }}"
      loop: "{{ found_rpms.files }}"
      loop_control:
        label: "Adding {{ item.path }}"

    - name: Install the kernel build artifacts on the target nodes
      become: true
      become_method: ansible.builtin.sudo
      ansible.builtin.dnf:
        name: "{{ packages }}"
        state: present
        disable_gpg_check: true

- name: Set the default kernel on the target nodes
  ansible.builtin.import_tasks: update-grub/install.yml
  tags:
    - linux
    - git
    - config
    - saved

- name: Reboot the target nodes into Linux {{ target_linux_tree }}
  become: true
  become_method: ansible.builtin.sudo
  ansible.builtin.reboot:
  tags:
    - linux
    - reboot

- name: Refresh facts
  ansible.builtin.gather_facts:

- name: Check the uname on the target nodes
  ansible.builtin.debug:
    msg: "Target kernel {{ target_linux_ref }}; Running kernel {{ ansible_kernel }}"
  tags:
    - linux
    - git
    - config
    - uname
